openapi: 3.0.0
servers:
  - description: Local Server
    url: http://localhost:4001/api
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FSWFOFFICIAL/Ecom-Product/1.0.0
info:
  version: "1.0.0"
  title: Microservice E-commerce Project (Product Service)
  description: This api documentation is for Product service.
tags:
  - name: Health
    description: Check Service is running on server
  - name: Product Details
    description: Get Single Product Details with Corresponding Inventory Histories
  - name: Create Product
    description: Create new Product with Inventory
  - name: Update Product
    description: Update Product
  - name: Get Product
    description: Get only Product data without Inventory
paths:
  "/health":
    get:
      tags:
        - Health
      responses:
        200:
          description: "Service is running"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    default: 200
                  message:
                    type: string
                    format: text
                    example: "Server health is okay"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
  "/products/{productId}/inventory":
    get:
      tags:
        - Product Details with Inventory
      parameters:
        - $ref: "#/components/parameters/productId"
      responses:
        200:
          description: "Data Retrieve Successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    default: 200
                  message:
                    type: string
                    format: text
                    example: "Data Retrieve Successfully"
                  data:
                    allOf:
                      - $ref: "#/components/schemas/ProductWithHistory"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
  "/products":
    post:
      tags:
        - Create Product
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/createProduct"
              required:
                - sku
                - title
                - price
      responses:
        201:
          description: Product Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Product Created!
                  data:
                    $ref: "#/components/schemas/Product"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
  "/products/{productId}":
    put:
      tags:
        - Update Product
      parameters:
        - $ref: "#/components/parameters/productId"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/updateProduct"
              required:
                - actionType
                - quantity
      responses:
        200:
          description: Product Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Product Updated!
                  data:
                    $ref: "#/components/schemas/Product"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
    delete:
      tags:
        - Delete Product
      parameters:
        - $ref: "#/components/parameters/productId"
      responses:
        200:
          description: "Data Deleted Successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    default: 204
                  message:
                    type: string
                    format: text
                    example: "Data Deleted Successfully"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"

components:
  parameters:
    productId:
      required: true
      in: path
      name: productId
      description: Hold unique key of any object
      schema:
        type: string
        example: "64f825a8e1e529afedd53695"
  schemas:
    400:
      type: array
      items:
        type: object
        properties:
          fields:
            type: string
            example: username
          message:
            type: string
            example: username max length is 20 Letters
          in:
            type: string
            example: body
    createProduct:
      type: object
      properties:
        inventoryId:
          type: string
          example: "64f825a8e1e529afedd53695"
        sku:
          type: string
          example: "product-1"
        title:
          type: string
          example: "Microphone"
        description:
          type: string
          example: ""
        price:
          type: number
          format: float
          example: 120
        status:
          type: string
          example: "PUBLISHED"
        quantity:
          type: integer
          format: int32
          example: 10
          default: 0
    updateProduct:
      type: object
      properties:
        sku:
          type: string
          example: "product-1"
        title:
          type: string
          example: "Microphone"
        description:
          type: string
          example: ""
        price:
          type: number
          format: float
          example: 120
        status:
          type: string
          example: "PUBLISHED"
        quantity:
          type: integer
          format: int32
          example: 10
          default: 0
    Product:
      type: object
      properties:
        id:
          type: string
          example: "64f825a8e1e529afedd53695"
        inventoryId:
          type: string
          example: "64f825a8e1e529afedd53695"
        sku:
          type: string
          example: "product-1"
        title:
          type: string
          example: "Microphone"
        description:
          type: string
          example: ""
        price:
          type: number
          format: float
          example: 120
        status:
          type: string
          example: "PUBLISHED"
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string
    ProductWithHistory:
      type: object
      properties:
        id:
          type: string
          example: "64f825a8e1e529afedd53695"
        title:
          type: string
          example: "Microphone"
        description:
          type: string
          example: "This is product description"
        price:
          type: integer
          format: int32
          example: 10
          default: 1000
        quantity:
          type: integer
          format: int32
          example: 10
          default: 1
        sku:
          type: string
          example: 123
        status:
          type: string
          example: PUBLISHED
        inventoryId:
          type: string
          example: "64f825a8e1e529afedd53695"
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string
        histories:
          type: array
          items:
            $ref: "#/components/schemas/history"
    history:
      type: object
      properties:
        id:
          type: string
          example: "64f825a8e1e529afedd53695"
        quantityChanged:
          type: integer
          format: int32
          example: 10
          default: 0
        actionType:
          type: string
          example: "IN"
        lastQuantity:
          type: integer
          format: int32
          example: 10
        newQuantity:
          type: integer
          format: int32
          example: 10
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string
  responses:
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              message:
                type: string
                example: Bad Request!
              errors:
                $ref: "#/components/schemas/400"
    "404":
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
    "405":
      description: Method Not Allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 405
              error:
                type: string
                example: Method Not Allowed
              message:
                type: string
                example: You are hiting on a invalid method
    "500":
      description: Server Error Occur
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Server Error
              message:
                type: string
                example: Server Not Responding! Try again later.
