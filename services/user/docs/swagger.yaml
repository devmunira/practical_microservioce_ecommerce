openapi: 3.0.0
servers:
  - description: Local Server
    url: http://localhost:4004
info:
  version: "1.0.0"
  title: Microservice E-commerce Project (User Service)
  description: This api documentation is for User service.
paths:
  "/health":
    get:
      tags:
        - Health
      responses:
        200:
          description: "Service is running"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    default: 200
                  message:
                    type: string
                    format: text
                    example: "Server health is okay"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
  "/users":
    post:
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/createUser"
              required:
                - name
                - email
                - authUserId
      responses:
        201:
          description: User Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: User Created!
                  data:
                    $ref: "#/components/schemas/user"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
    get:
      responses:
        200:
          description:
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    default: 200
                  message:
                    type: string
                    format: text
                    example: "Data Retrieve Successfully"
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/User"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
  "/users/{userId}":
    get:
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        200:
          description:
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    default: 200
                  message:
                    type: string
                    format: text
                    example: "Data Retrieve Successfully"
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/user"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
    put:
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/updateUser"
      responses:
        200:
          description: User Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User Updated!
                  data:
                    $ref: "#/components/schemas/user"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
    delete:
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        200:
          description: "Data Deleted Successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    default: 204
                  message:
                    type: string
                    format: text
                    example: "Data Deleted Successfully"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
        405:
          $ref: "#/components/responses/405"
components:
  parameters:
    userId:
      required: true
      in: path
      name: userId
      description: Hold unique key of any object
      schema:
        type: string
        example: "64f825a8e1e529afedd53695"
  schemas:
    400:
      type: array
      items:
        type: object
        properties:
          fields:
            type: string
            example: username
          message:
            type: string
            example: username max length is 20 Letters
          in:
            type: string
            example: body
    createUser:
      type: object
      properties:
        authUserId:
          type: string
          example: "64f825a8e1e529afedd53695"
        name:
          type: string
          example: "Munira"
        email:
          type: string
          example: "munira.learn@gmail.com"
        address:
          type: string
          example: "Mount Roskill"
        phone:
          type: string
          example: +8801881959920
    updateUser:
      type: object
      properties:
        name:
          type: string
          example: "Munira"
        email:
          type: string
          example: "munira.learn@gmail.com"
        address:
          type: string
          example: "Mount Roskill"
        phone:
          type: string
          example: +8801881959920
    user:
      type: object
      properties:
        id:
          type: string
          example: "64f825a8e1e529afedd53695"
        authUserId:
          type: string
          example: "64f825a8e1e529afedd53695"
        name:
          type: string
          example: "Munira"
        email:
          type: string
          example: "munira.learn@gmail.com"
        address:
          type: string
          example: "Mount Roskill"
        phone:
          type: string
          example: +8801881959920
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string
  responses:
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              message:
                type: string
                example: Bad Request!
              errors:
                $ref: "#/components/schemas/400"
    "404":
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
    "405":
      description: Method Not Allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 405
              error:
                type: string
                example: Method Not Allowed
              message:
                type: string
                example: You are hiting on a invalid method
    "500":
      description: Server Error Occur
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Server Error
              message:
                type: string
                example: Server Not Responding! Try again later.
